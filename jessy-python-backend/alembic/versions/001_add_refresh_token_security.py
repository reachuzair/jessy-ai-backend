"""Add refresh token security features

Revision ID: 001_add_refresh_token_security
Revises: 
Create Date: 2025-01-15 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001_add_refresh_token_security'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if users table exists, if not create it
    # Otherwise just add the new refresh token columns
    conn = op.get_bind()
    
    # Check if users table exists
    inspector = sa.inspect(conn)
    tables = inspector.get_table_names()
    
    if 'users' not in tables:
        # Create users table if it doesn't exist
        op.create_table('users',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('username', sa.String(length=255), nullable=True),
        sa.Column('password_hash', sa.String(length=255), nullable=False),
        sa.Column('role', sa.String(length=50), nullable=False),
        sa.Column('full_name', sa.String(length=255), nullable=True),
        sa.Column('email', sa.String(length=255), nullable=True),
        sa.Column('phone', sa.String(length=20), nullable=True),
        sa.Column('is_email_verified', sa.Boolean(), nullable=False),
        sa.Column('email_verification_otp', sa.String(length=255), nullable=True),
        sa.Column('email_verification_otp_expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('password_reset_otp', sa.String(length=255), nullable=True),
        sa.Column('password_reset_otp_expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('refresh_token_hash', sa.String(length=255), nullable=True),
        sa.Column('refresh_token_expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('last_login', sa.Date(), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('username')
        )
    else:
        # Users table exists, just add the new refresh token columns if they don't exist
        columns = [col['name'] for col in inspector.get_columns('users')]
        
        if 'refresh_token_hash' not in columns:
            op.add_column('users', sa.Column('refresh_token_hash', sa.String(length=255), nullable=True))
            
        if 'refresh_token_expires_at' not in columns:
            op.add_column('users', sa.Column('refresh_token_expires_at', sa.DateTime(timezone=True), nullable=True))
    
    # Create token blacklist table if it doesn't exist
    if 'token_blacklist' not in tables:
        op.create_table('token_blacklist',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('token_jti', sa.String(length=255), nullable=False),
        sa.Column('token_type', sa.String(length=20), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('blacklisted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('token_jti')
        )
        
        # Create indexes for token blacklist
        op.create_index('idx_token_blacklist_jti', 'token_blacklist', ['token_jti'])
        op.create_index('idx_token_blacklist_user_id', 'token_blacklist', ['user_id'])
        op.create_index('idx_token_blacklist_expires_at', 'token_blacklist', ['expires_at'])
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop indexes and token blacklist table
    try:
        op.drop_index('idx_token_blacklist_expires_at', table_name='token_blacklist')
        op.drop_index('idx_token_blacklist_user_id', table_name='token_blacklist')
        op.drop_index('idx_token_blacklist_jti', table_name='token_blacklist')
        op.drop_table('token_blacklist')
    except:
        pass  # Ignore if doesn't exist
    
    # Remove refresh token columns from users table
    try:
        op.drop_column('users', 'refresh_token_expires_at')
        op.drop_column('users', 'refresh_token_hash')
    except:
        pass  # Ignore if doesn't exist
    
    # Note: We don't drop the users table in downgrade as it may contain important data
    
    # ### end Alembic commands ###